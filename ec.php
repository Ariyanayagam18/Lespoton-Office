<?php

echo base64_decode("<?PHP
include "siteinfo.php";
$timezone = "Asia/Kolkata";
date_default_timezone_set($timezone);
$activeall = 1;
$cameraAllowed = "1";
$expirydate = '2019-03-31 00:00:00';
// End

$secureusertoken = $_REQUEST["userToken"];

if(isset($_GET["action"]))
 $action = $_GET["action"];
else if(isset($_POST["action"]))
   {
    $action = $_POST["action"];
    $postdetails = $_POST; 
    //print_r($postdetails);die;
   }
else
{
    $postdetails = json_decode(file_get_contents('php://input'), TRUE); 
    $action = $postdetails["action"];
    $secureusertoken = $postdetails["userToken"];
    // Get org details
    $selectorg_details = mysql_query("select * from users where Org_code='".$postdetails["apptype"]."'");
    if(mysql_num_rows($selectorg_details)>0)
    {
    $org_details = mysql_fetch_array($selectorg_details);
    $expirydate  = $org_details["Expire_date"]." 00:00:00";
    $org_status  = $org_details["Org_status"];
    }
    // End
}

if($postdetails)
{
    $apptype = $postdetails["apptype"];
    $checkdate = date("Y-m-d H:i:s");
    $cameracheck = mysql_query("select a.event_id,a.ed_id,a.bird_id,d.brid_type,a.race_distance,a.date,a.end_time,TIMESTAMP(a.date, STR_TO_DATE(a.start_time, '%h:%i %p')) as stimes,TIMESTAMP(a.date, STR_TO_DATE(a.end_time, '%h:%i %p')) as etimes FROM ppa_event_details as a LEFT JOIN ppa_events as b on a.event_id=b.Events_id LEFT JOIN users as c on b.Org_id=c.users_id LEFT JOIN ppa_bird_type as d on d.b_id=a.bird_id where c.Org_code='".$apptype."' and ('".$checkdate."' BETWEEN TIMESTAMP(a.date, STR_TO_DATE(a.start_time, '%h:%i %p')) and TIMESTAMP(a.date, STR_TO_DATE(a.end_time, '%h:%i %p'))) and b.result_publish='0' group by a.race_distance order by etimes DESC");
    if(mysql_num_rows($cameracheck)==0)  // If no events available ..camera diabled.
      $cameraAllowed = "0";
}


 
 // Checking code starts


 switch($action){
    case 'pparegister':   // Register and Login service

               $deviceide = $postdetails["deivce_id"];
               $username = $postdetails["username"];
               $apptype = $postdetails["apptype"];
               $password = $postdetails["password"];
               $phone_no = $postdetails["phone_no"];
               $model = $postdetails["model"];
               $version = $postdetails["ver"];
               $code = $postdetails["code"];    
               $timezone = "Asia/Kolkata";
               date_default_timezone_set($timezone);
               $curdate = date("Y-m-d H:i:s");
               $usercount = 0;
               // get org contact number
                    $orgcont_details = mysql_query("select * from users where Org_code='".$apptype."'");
                    $orgcontactdet = mysql_fetch_array($orgcont_details);
                    $phone_num = $orgcontactdet["phone_no"];
                    $usercount = $orgcontactdet["usercount"];
               //
               $checkusercount = mysql_query("select * from ppa_register where apptype='".$apptype."'");
              
               if(mysql_num_rows($checkusercount)<$usercount)
               {

               $selectavailability = mysql_query("select * from ppa_register where phone_no='".$phone_no."' and apptype='".$apptype."'");
               if(mysql_num_rows($selectavailability)==0) {
               $insert_qry = mysql_query("insert ppa_register set version='".$version."',code='".$code."',apptype='".$apptype."',username='".$username."',password='".$password."',phone_no='".$phone_no."',expiry_date='".$expirydate."',device_id='".$deviceide."',model='".$model."',cre_date='".$curdate."'");
               $ide = mysql_insert_id();
               $useride = md5($ide);
               $updatetoken = mysql_query("update ppa_register set userToken='".$useride."' where reg_id='".$ide."'");
               $data["status"]=1;  // Updated
               $data["activestatus"]=$activeall;
               $data["accountstatus"]=0;
               $data["userToken"]=$useride;
               $data["loftstatus"]=0;
               $data["Orgphone_no"]=$phone_num;
               $data["usertype"]=0;
               $data["isCameraAllowed"]= $cameraAllowed;
               $data["expirydate"]=$expirydate;
               echo json_encode($data);
               die;
               }
               else
               {
                  $timezone = "Asia/Kolkata";
                  date_default_timezone_set($timezone);
                  $curdate = date("Y-m-d H:i:s");

                  $update_qry = mysql_query("update ppa_register set version='".$version."',code='".$code."',apptype='".$apptype."',username='".$username."',password='".$password."',phone_no='".$phone_no."',expiry_date='".$expirydate."',device_id='".$deviceide."',model='".$model."',update_date='".$curdate."' where phone_no='".$phone_no."' and apptype='".$apptype."'");
                   
                   // Get user account status
                    $accdetails = mysql_fetch_array($selectavailability);
                   //
                   // get org contact number
                    $orgcont_details = mysql_query("select * from users where Org_code=".$apptype);
                    $orgcontactdet = mysql_fetch_array($orgcont_details);
                    $phone_num = $orgcontactdet["phone_no"];
                    $ide = $accdetails["reg_id"];
                    $useride = md5($ide); 
                    $updatetoken = mysql_query("update ppa_register set userToken='".$useride."' where reg_id='".$ide."'");
                   //
                   $data["status"]=1;
                   $data["activestatus"]=$activeall;
                   $data["accountstatus"]=$accdetails["status"];
                   $data["userToken"]=$useride;
                   $data["Orgphone_no"]=$phone_num;
                   $data["usertype"]=$accdetails["usertype"];
                   $data["loftstatus"]=$accdetails["loftstatus"];
                   $data["isCameraAllowed"]= $cameraAllowed;
                   $data["expirydate"]=$expirydate;
                   $data["test"]=$upquery;
                   echo json_encode($data);
                   die;
               }
              }
              else
              {
                 $data["status"]=0;
                 $data["msg"] = "Fancier count limit reached. Please contact your Oraganization";
              }
             
    echo json_encode($data);
    break;
    
    case 'getusers':
          $apptype = $_GET["apptype"];
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $data["url"] = $SITEMAINURL."admin/app/user.php?club_type=".$apptype;
          $data["activestatus"]=$activeall;
          $data["expirydate"]=$expirydate;
          $data["isCameraAllowed"]= $cameraAllowed;
          echo json_encode($data);
          break;

    case 'racelist':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
         $apptype =  $postdetails["apptype"];
         $query = mysql_query("select * from ppa_events as a LEFT JOIN users as b ON a.Org_id=b.users_id where b.Org_code='".$apptype."'") ;
         $racecount = mysql_num_rows($query);
         $i=0;
         while($res = mysql_fetch_array($query))
         {
           $data["racelist"][$i]["race_ide"]   = $res["Events_id"];
           $data["racelist"][$i]["race_name"]  = $res["Event_name"];
           $data["racelist"][$i]["race_date"]  = $res["Event_date"];
           $data["racelist"][$i]["race_status"]= $res["Event_status"];
           $i++; 
         }
         $data["race_count"]= $racecount;
         echo json_encode($data);
         break;

    case 'basketinfo':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
         $eventide =  $postdetails["event_id"];
         $apptype =  $postdetails["apptype"];
         $birdtype = mysql_query("SELECT DISTINCT ppa_bird_type.b_id,ppa_bird_type.brid_type ,ed_id, race_distance , event_id  FROM `ppa_event_details` INNER JOIN ppa_bird_type ON ppa_event_details.bird_id=ppa_bird_type.b_id where ppa_event_details.event_id='".$eventide . "' group by ppa_event_details.bird_id,ppa_event_details.race_distance");
         $i=0;
         
         $data["event_id"]  =  $postdetails["event_id"];

         while($birdinfo = mysql_fetch_array($birdtype))
         {
           $data["birdinfo"][$i]["value"]   = $birdinfo["b_id"]."#".$birdinfo["ed_id"];
           $data["birdinfo"][$i]["text"]    = $birdinfo["race_distance"]." Km - ".$birdinfo["brid_type"];
           $i++; 
         }
         
         $birdcolorinfo = mysql_query("select * from pigeons_color");
         $i=0;
         while($birdcolinfo = mysql_fetch_array($birdcolorinfo))
         {
           $data["birdcolor"][$i] = $birdcolinfo["color"];
           $i++; 
         }

         $fancierinfo = mysql_query("select * from ppa_register where apptype='".$apptype."'");
         $i=0;
         while($fancierlist = mysql_fetch_array($fancierinfo))
         {
           $data["fancierinfo"][$i]["useride"] = $fancierlist["reg_id"];
           $data["fancierinfo"][$i]["username"] = $fancierlist["username"];
           $i++; 
         }
         echo json_encode($data);
         break;
    
    case 'viewbasketinfo':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
         $eventide =  $postdetails["event_id"];
         $apptype =  $postdetails["apptype"];
         if(isset($postdetails["fancieride"]))
          $fancier = " and a.fancier_id='".$postdetails["fancieride"]."'";
         else
          $fancier = "";

         $basketquery = mysql_query("select a.entry_id,a.fancier_id,b.username,a.ring_no,a.color,a.gender,c.brid_type,f.race_distance from ppa_basketing as a LEFT JOIN ppa_register as b ON a.fancier_id = b.reg_id LEFT JOIN ppa_bird_type as c ON c.b_id=a.bird_type LEFT JOIN ppa_event_details as d ON d.ed_id = a.event_id LEFT JOIN ppa_events as e ON d.event_id = a.event_id LEFT JOIN ppa_event_details as f ON f.ed_id=a.event_details_id where a.event_id='".$eventide . "'".$fancier."");
         
         $i=0;
         
         $data["event_id"]  =  $postdetails["event_id"];

         while($basketinfo = mysql_fetch_array($basketquery))
         {
           $data["basketinfo"][$i]["entry_id"]   = $basketinfo["entry_id"];
           $data["basketinfo"][$i]["fancier_id"]   = $basketinfo["fancier_id"];
           $data["basketinfo"][$i]["username"]   = $basketinfo["username"];
           $data["basketinfo"][$i]["birdcategory"]   = $basketinfo["brid_type"];
           $data["basketinfo"][$i]["raceinfo"]   = $basketinfo["race_distance"]." km";
           $data["basketinfo"][$i]["ringno"]   = $basketinfo["ring_no"];
           $data["basketinfo"][$i]["gender"]   = $basketinfo["gender"];
           $data["basketinfo"][$i]["color"]   = $basketinfo["color"];

           $i++; 
         }
         
         $fancierinfo = mysql_query("select * from ppa_register where apptype='".$apptype."'");
         $i=0;
         while($fancierlist = mysql_fetch_array($fancierinfo))
         {
           $data["fancierinfo"][$i]["useride"] = $fancierlist["reg_id"];
           $data["fancierinfo"][$i]["username"] = $fancierlist["username"];
           $i++; 
         }
         echo json_encode($data);
         break;

    case 'deletebasketinfo':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
         $evententryide =  $postdetails["entry_id"];

         $deletebasketentry = mysql_query("delete from ppa_basketing where entry_id='".$evententryide."'");

         $eventide =  $postdetails["event_id"];
         $apptype =  $postdetails["apptype"];
         if(isset($postdetails["fancieride"]))
          $fancier = " and a.fancier_id='".$postdetails["fancieride"]."'";
         else
          $fancier = "";

         $basketquery = mysql_query("select a.entry_id,b.username,a.ring_no,a.color,a.gender,c.brid_type,f.race_distance from ppa_basketing as a LEFT JOIN ppa_register as b ON a.fancier_id = b.reg_id LEFT JOIN ppa_bird_type as c ON c.b_id=a.bird_type LEFT JOIN ppa_event_details as d ON d.ed_id = a.event_id LEFT JOIN ppa_events as e ON d.event_id = a.event_id LEFT JOIN ppa_event_details as f ON f.ed_id=a.event_details_id where a.event_id='".$eventide . "'".$fancier."");
         
         $i=0;
         
         $data["event_id"]  =  $postdetails["event_id"];

         while($basketinfo = mysql_fetch_array($basketquery))
         {
           $data["basketinfo"][$i]["entry_id"]   = $basketinfo["entry_id"];
           $data["basketinfo"][$i]["username"]   = $basketinfo["username"];
           $data["basketinfo"][$i]["birdcategory"]   = $basketinfo["brid_type"];
           $data["basketinfo"][$i]["raceinfo"]   = $basketinfo["race_distance"]." km";
           $data["basketinfo"][$i]["ringno"]   = $basketinfo["ring_no"];
           $data["basketinfo"][$i]["gender"]   = $basketinfo["gender"];
           $data["basketinfo"][$i]["color"]   = $basketinfo["color"];

           $i++; 
         }
         
         $fancierinfo = mysql_query("select * from ppa_register where apptype='".$apptype."'");
         $i=0;
         while($fancierlist = mysql_fetch_array($fancierinfo))
         {
           $data["fancierinfo"][$i]["useride"] = $fancierlist["reg_id"];
           $data["fancierinfo"][$i]["username"] = $fancierlist["username"];
           $i++; 
         }
         echo json_encode($data);
         break;



    case 'insertbasket':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $apptype     = $postdetails["apptype"];
          $birdinfo     = explode("#",$postdetails["birdcategory"]);
          $event_id     = $postdetails["event_id"];
          $eventdetails_id     = $birdinfo[1];
          $birdtype      = $birdinfo[0];
          $fancier_id  = $postdetails["fancier_id"];
          $duplicate = "";  
          $count = 0;        
          for ($t=0;$t<count($postdetails["birds"]);$t++) {
          $ringno      = $postdetails["birds"][$t]["ringno"];
          $color       = $postdetails["birds"][$t]["color"];
          $gender      = $postdetails["birds"][$t]["gender"];
          
          $checkselect = mysql_query("select event_id from ppa_basketing where ring_no='".$ringno."' and org_code='".$apptype."'");
            if(mysql_num_rows($checkselect)==0){
             $insert_qry = mysql_query("insert ppa_basketing set event_id='".$event_id."',event_details_id='".$eventdetails_id."',fancier_id='".$fancier_id."',org_code='".$apptype."',ring_no='".$ringno."',bird_type='".$birdtype."',color='".$color."',gender='".$gender."',update_date=now()");
             $count++;
             }
             else
              $duplicate.= $ringno." , ";
          }

          $data["status"]=1;  // Updated
          if($duplicate=="")
          $data["msg"]="Your information added successfully";  // Updated
          else
          $data["msg"]=$duplicate."  these ring numbers are already added";  // Updated
           
          if($count==0)
          {
            $data["status"]=0;
            $data["msg"]="Your information not added";  // Updated
          }
          echo json_encode($data);
          //print_r($postdetails);
          break;


    case 'categorylist':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          error_reporting(-1);
          ini_set('display_errors', 1);
          $apptype =  $postdetails["apptype"];
          $selectdate = date("Y-m-d");
          $query = mysql_query("select a.event_id,a.ed_id,a.bird_id,d.brid_type,a.race_distance FROM ppa_event_details as a LEFT JOIN ppa_events as b on a.event_id=b.Events_id LEFT JOIN users as c on b.Org_id=c.users_id LEFT JOIN ppa_bird_type as d on d.b_id=a.bird_id where c.Org_code='".$apptype."' and a.date >='".$selectdate."' and b.result_publish='0' group by a.race_distance order by a.ed_id ASC") ;
          $i=0;
          while($res = mysql_fetch_array($query))
          {
            $data["category"][$i]["name"]  = $res["race_distance"]." Km (".$res["brid_type"].")";
            $data["category"][$i]["value"] = $res["event_id"]."#".$res["ed_id"]."#".$res["bird_id"]."#".$res["brid_type"]."#".$res["race_distance"];
            $i++;  
          }
          echo json_encode($data);
          break;
    case 'updatephoto':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $apptype =  $postdetails["apptype"];
          $filename =  $postdetails["filename"];
          $selectedvalue = $postdetails["category"];
          $deviceide = $postdetails["deivce_id"];
          $username = $postdetails["username"];
          $phone_no = $postdetails["phone_no"];

          $selectedinfo  = explode("#",$selectedvalue);

          $insert_qry = mysql_query("insert ppa_updatephoto set username='".$username."',phone_no='".$phone_no."',device_ide='".$deviceide."',event_id='".$selectedinfo[0]."',event_details_id='".$selectedinfo[1]."',birdtype='".$selectedinfo[2]."',race_distance='".$selectedinfo[4]."',photo_name='".$filename."',club_code='".$apptype."',cre_date=now()");
          $ide = mysql_insert_id();
          if($ide!=0)
          $data["status"] = 1;
          else
          $data["status"] = 0;
            
          echo json_encode($data);
          break;

    case 'addpiegeon':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
    error_reporting(-1);
    ini_set('display_errors', 1);
          $apptype =  $postdetails["apptype"];
          $bird_type =  $postdetails["bird_type"];
          $ringno = $postdetails["ringno"];
          $color = $postdetails["color"];
          $gender = $postdetails["gender"];
          $phone_no = $postdetails["phone_no"];
          $checkqry = mysql_query("select * from pigeons where apptype='".$apptype."' and ringno='".$ringno."' and mobile_no='".$phone_no."'");

          if(mysql_num_rows($checkqry)==0) 
          {
           $insert_qry = mysql_query("insert pigeons set bird_type='".$bird_type."',mobile_no='".$phone_no."',ringno='".$ringno."',color='".$color."',gender='".$gender."',apptype='".$apptype."',cre_date=now()");
           $ide = mysql_insert_id();
           $data["statusmsg"] = "Pigeons added successfully.";
          }
          else
          {
           $ide = 0;
           $data["statusmsg"] = "Ringno : ".$ringno." already available in our system. Contact admin for further";
          }
          
          if($ide!=0)
          $data["status"] = 1;
          else
          $data["status"] = 0;
            
          echo json_encode($data);
          break;

    case 'pigeoninfo':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $select_color = mysql_query("select * from pigeons_color");
          $i=0;
          while($color_res = mysql_fetch_array($select_color))
          {
            $data["color"][$i]["name"]  = $color_res["color"];
            $data["color"][$i]["ide"]  = $color_res["ide"];
            $i++;  
          }
          $select_birdtypes = mysql_query("select * from ppa_bird_type");
          $i=0;
          while($birdtype_res = mysql_fetch_array($select_birdtypes))
          {
            $data["birdtype"][$i]["name"]  = $birdtype_res["brid_type"];
            $data["birdtype"][$i]["ide"]       = $birdtype_res["b_id"];
            $i++;  
          }
          echo json_encode($data);
          break;

    case 'getevents':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $apptype = $_GET["apptype"];
          $data["url"] = $SITEMAINURL."admin/app/event.php?club_type=".$apptype;
          $data["activestatus"]=$activeall;
          $data["expirydate"]=$expirydate;
          $data["isCameraAllowed"]= $cameraAllowed;
          echo json_encode($data);
          break;

    case 'current_time':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
        date_default_timezone_set("Asia/Kolkata");
        $data["status"]=3;  
        $dd=date("Y-m-d H:i:s");
        $data["timezone"]=strtotime($dd);  
          echo json_encode($data);
          break;
    case 'locationupdate':
        $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
        $raceide =  $postdetails["racename"];
        $latitude =  $postdetails["latitude"];
        $longitude = $postdetails["longitude"];
        
        $update_eventloation = mysql_query("update ppa_events set Event_lat='".$latitude."',Event_long='".$longitude."' where Events_id='".$raceide."'");

        $data["status"]=1;  
        $data["message"]="Race location updated successfully";  
        echo json_encode($data);
        break;
    case 'racelistinfo':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $select_races = mysql_query("select * from ppa_events order by Event_date DESC");
          $i=0;
          while($race_res = mysql_fetch_array($select_races))
          {
            $data["race"][$i]["name"]  = $race_res["Event_name"]." ( ".$race_res["Event_name"]." )";
            $data["race"][$i]["ide"]  = $race_res["Events_id"];
            $i++;  
          }
          echo json_encode($data);
          break;

    case 'syncinfo':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
       error_reporting(-1);
          ini_set('display_errors', 1);
          date_default_timezone_set("Asia/Kolkata");
          $dd=date("Y-m-d H:i:s");
          $given = new DateTime($dd);
          $data["localDate"] = $given->format("m/d/Y H:i:s"); // Y-m-d H:i:s e
          $given->setTimezone(new DateTimeZone("UTC"));
          $data["utcDate"] =  $given->format("m/d/Y H:i:s"); // Y-m-d H:i:s e 
          $utcgiven = strtotime($data["utcDate"]);
          $istgiven = strtotime($data["localDate"]);
          $data["returnType"] = "json";
          $data["timezone"] = "UTC";
          //$data["daylightSavingTime"] = false;
          $data["url"] = "http://104.236.218.51/spotlightdemo/newapi.php";
          $data["timestamp"] = $utcgiven;
          $data["isttimestamp"] = $istgiven;

          $apptype  =  $postdetails["apptype"];
          $phone_no =  $postdetails["phone"];
          $selectavailability = mysql_query("select usertype from ppa_register where phone_no='".$phone_no."' and apptype='".$apptype."'");
          $accdetails = mysql_fetch_array($selectavailability);
          $data["usertype"]=$accdetails["usertype"];



          echo json_encode($data);
          break;
    case 'loftstatus':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $apptype    = $postdetails["apptype"];
          $deviceide  = $postdetails["deivce_id"];
          $phone_no = $postdetails["phone_no"];
          $select_loftstat = mysql_query("select * from ppa_register where phone_no='".$phone_no."' and apptype='".$apptype."'");
          if(mysql_num_rows($select_loftstat)>0) {
            $details = mysql_fetch_array($select_loftstat);
            $data["loftstatus"]=$details["loftstatus"]; 
          }
          else
           $data["loftstatus"]=0; 

          $data["status"]=1;
          $data["activestatus"]=$activeall;
          $data["expirydate"]=$expirydate;
          $data["isCameraAllowed"]= $cameraAllowed;
          echo json_encode($data);
          break;

    case 'accountstatus':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $apptype    = $postdetails["apptype"];
          $deviceide  = $postdetails["deivce_id"];
          $phone_no = $postdetails["phone_no"];
          $select_loftstat = mysql_query("select * from ppa_register where phone_no='".$phone_no."' and apptype='".$apptype."'");
          if(mysql_num_rows($select_loftstat)>0) {
            $details = mysql_fetch_array($select_loftstat);
            $data["accountstatus"]=$details["status"]; 
          }
          else
           $data["accountstatus"]=0; 

          $data["status"]=1;
          $data["activestatus"]=$activeall;
          $data["expirydate"]=$expirydate;
          $data["isCameraAllowed"]= $cameraAllowed;
          echo json_encode($data);
          break;

    case 'loftdetail':
          $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
          $apptype    = $postdetails["apptype"];
          $deviceide  = $postdetails["deivce_id"];
          $phone_no   = $postdetails["phone_no"];

          $select_loftstat = mysql_query("select * from ppa_register where phone_no='".$phone_no."' and apptype='".$apptype."'");

          if(mysql_num_rows($select_loftstat)>0) {
            $details = mysql_fetch_array($select_loftstat);

            $data["loftstatus"]=$details["loftstatus"]; 
            $data["loft_image"]=$SITEMAINURL."uploads/".$details["loft_image"]; 
            $data["latitude"]=$details["latitude"]; 
            $data["longitude"]=$details["longitude"]; 
            
          }
          else
          {
           $data["loftstatus"]=0; 
           $data["loft_image"]="";
           $data["latitude"] =""; 
           $data["longitude"]="";
          }

          $data["status"]=1;
          $data["activestatus"]=$activeall;
          $data["expirydate"]=$expirydate;
          $data["isCameraAllowed"]= $cameraAllowed;
          echo json_encode($data);
          break;

    case 'loftupdate':
     $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
     $latitude   = $_POST["latitude"];
     $longitude  = $_POST["longitude"];
     $apptype    = $_POST["apptype"];
     $deviceide  = $_POST["deivce_id"];
     $phone_no   = $_POST["phone_no"];
     //print_r($_FILES);print_r($_POST);die;
               $path = "uploads/"; // Upload directory
               $count = 0;
               if ($_FILES['files']['error'] != 4) 
                   { // No error found! Move uploaded files 
                       $timeval = time();
                       $path_parts = pathinfo($_FILES["files"]["name"]);
                       $extension = $path_parts['extension'];
                       if(move_uploaded_file($_FILES["files"]["tmp_name"], $path.$timeval.$path_parts['basename']))
                            {
                              $filespath = $timeval.$path_parts['basename'];
                              $data["status"]=1;
                              $data["activestatus"]=$activeall;
                              $data["expirydate"]=$expirydate;
                              $update_qry = mysql_query("update ppa_register set latitude='".$latitude."',longitude='".$longitude."',loft_image='".$filespath."' where apptype='".$apptype."' and phone_no='".$phone_no."'");
                            }
                            else
                            {
                              $data["status"]=0;
                              $data["activestatus"]=$activeall;
                              $data["expirydate"]=$expirydate;
                              $data["isCameraAllowed"]= $cameraAllowed;
                            }
                   }
                   else
                   {
                    $data["status"]=0;
                    $data["activestatus"]=$activeall;
                    $data["expirydate"]=$expirydate;
                    $data["isCameraAllowed"]= $cameraAllowed;
                   }
        
     
     echo json_encode($data);
    break;

    case 'fileupload':
         $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }
               date_default_timezone_set("Asia/Kolkata");
               $path = "uploads/"; // Upload directory
               $count = 0;
               $phone_no   = $_POST["phone_no"];
               $username   = $_POST["username"];
               $apptype    = $_POST["apptype"];
               $latitude = "";
               $longitude = "";
                    if ($_FILES['files']['error'] != 4) 
                   { // No error found! Move uploaded files 
                       $timeval = time();
                       $path_parts = pathinfo($_FILES["files"]["name"]);
                       $extension = $path_parts['extension'];
                       if(move_uploaded_file($_FILES["files"]["tmp_name"], $path.$path_parts['basename']))
                            {
                              
                              // SELECT * FROM ppa_event_details as a LEFT JOIN ppa_events as b ON b.Events_id=a.event_id LEFT JOIN ppa_oraganization as c ON c.Org_id=b.Org_id where c.Org_code='PPA'

                             $selectdate = date("Y-m-d"); 
                             $selquery = mysql_query("select a.event_id,a.ed_id,a.bird_id,d.brid_type,a.race_distance,(6371 * acos( 
                cos( radians(b.Event_lat) ) 
              * cos( radians( ".$_POST['latitude']." ) ) 
              * cos( radians( ".$_POST['longitude']." ) - radians(b.Event_long) ) 
              + sin( radians(b.Event_lat) ) 
              * sin( radians( ".$_POST['latitude']." ) )
                ) ) as distance FROM ppa_event_details as a LEFT JOIN ppa_events as b on a.event_id=b.Events_id LEFT JOIN users as c on b.Org_id=c.users_id LEFT JOIN ppa_bird_type as d on d.b_id=a.bird_id where c.Org_code='".$apptype."' and a.date >='".$selectdate."' and b.result_publish='0' group by a.race_distance order by a.ed_id ASC limit 0,1") ;
                              $res = mysql_fetch_array($selquery);
                              $raceide = $res["event_id"];
                              $distance = $res["distance"];
                              if(isset($_POST["latitude"]))
                               $latitude = $_POST["latitude"];
                              if(isset($_POST["longitude"]))
                               $longitude = $_POST["longitude"];
                             
                              $filespath = $path_parts['basename'];
                              $data["status"]=1;
                              $data["activestatus"]=$activeall;
                              $data["expirydate"]= $expirydate;
                              $data["distance"]=$distance;
                              $data["isCameraAllowed"]= $cameraAllowed;
                             // $deviceide  = $_POST["deivce_id"];
                              if(isset($_POST["phone_no"]))
                              $phone_no   = $_POST["phone_no"];
                              else
                               $phone_no = '';
                              $insert_qry = mysql_query("insert ppa_files set distance='".$distance."',event_id='".$raceide."',latitude='".$latitude."',longitude='".$longitude."',club_code='".$apptype."',filename='".$filespath."',mobile='".$phone_no."',username='".$username."',cre_date=now()");

                              sendnotification($apptype,$phone_no,$username);
                            }
                            else
                            {
                              $data["status"]=0;
                              $data["activestatus"]=$activeall;
                              $data["expirydate"]=$expirydate;
                              $data["isCameraAllowed"]= $cameraAllowed;
                            }
                   }
                   else
                   {
                    $data["status"]=0;
                    $data["activestatus"]=$activeall;
                    $data["expirydate"]=$expirydate;
                    $data["isCameraAllowed"]= $cameraAllowed;
                   }
        
     
     echo json_encode($data);
    break;
    case 'ppaexpiry':
     $authuser = checkauth($secureusertoken);
          if($authuser=="0")
          {
            $data["status"]=404;
            $data["msg"]="Authentication failed";
            echo json_encode($data);
            break;
          }

     $apptype = $postdetails["apptype"];
     $code = $postdetails["code"];
     $deviceide = $postdetails["deivce_id"];
     $phone_no   = $postdetails["phone_no"];
     $fcm_id   = $postdetails["fcm_id"];
     $selectuserstatus = mysql_query("select * from ppa_register where phone_no='".$phone_no."' and apptype='".$apptype."'");
     // get org contact number
    $orgcont_details = mysql_query("select * from users where Org_code='".$apptype."'");
    $orgcontactdet = mysql_fetch_array($orgcont_details);
    $phone_num = "8015512308";//$orgcontactdet["phone_no"];
    $data["Orgphone_no"]  = $phone_num;
    //
     if(mysql_num_rows($selectuserstatus)>0) {
      $accdetails = mysql_fetch_array($selectuserstatus);
      $data["accountstatus"]= $accdetails["status"];
      $data["loftstatus"]= $accdetails["loftstatus"];
      $data["latitude"]= $accdetails["latitude"];
      $data["longitude"]= $accdetails["longitude"];
      $data["reg_id"]= $accdetails["reg_id"];
      $updatefcm_det = mysql_query("update ppa_register set android_id='".$fcm_id."' where reg_id='".$accdetails["reg_id"]."'");

      $data["loft_image"]= $SITEMAINURL."uploads/".$accdetails["loft_image"];
     }
     else
     {
      $data["accountstatus"]= 0;
      $data["loftstatus"]= 0;
      $data["latitude"]= "";
      $data["longitude"]= "";
      $data["loft_image"]= "";
     }
     $data["isCameraAllowed"]= $cameraAllowed;

     
     $data["status"]=1;
     $data["activestatus"]=$activeall;
     $data["expirydate"]=$expirydate;
     echo json_encode($data);
    break;
    default:	
		header("HTTP/1.1 200 OK");
		die;	
		break;	
   }
   
   function checkauth($token)
   {
      $checkuserauth = mysql_query("select * from ppa_register where userToken='".$token."'");
      if(mysql_num_rows($checkuserauth)>0)
       {
        $authusertoken = mysql_fetch_array($checkuserauth);
        $checkuser = $authusertoken["userToken"];
       }
       else
       $checkuser = 0;
       return $checkuser;
   }
   function sendnotification($apptype,$phone_no,$username)
   {
       $selectfanciers = mysql_query("select * from ppa_register where phone_no!='".$phone_no."' and apptype='".$apptype."'");
       //$selectfanciers = mysql_query("select * from ppa_register where apptype='".$apptype."'");
       if(mysql_num_rows($selectfanciers)>0) {
          
          while($fancierinfo = mysql_fetch_array($selectfanciers))
           {
              $android_deviceide = $fancierinfo["android_id"];
              $message='{"ResponseCode":"100","UserName":"'.$username.'","Apptype":"'.$apptype.'","Title":"Photo Taken","Message":"Fancier Mr.'.$username.'. taken the piegion snap :) check out his shots"}';
              $pushparameter="";
              $badge=1;
              sendAnroidPushNotification($message,$android_deviceide,$pushparameter,$badge);
           }

       }
   }

   function sendAnroidPushNotification($message="",$deviceToken="",$pushparameter="",$badge=1)
   {
            define( 'API_ACCESS_KEY', 'AIzaSyBd1d-aGtwwbG-QUWd67PIiUZtnI-aKVow' );
            $registrationIds = $deviceToken;    
           #prep the bundle

            $fields = array(
                'to' => $deviceToken,
                'data' => array('to' => $deviceToken, 'message' => $message)
            );
  
            $headers = array
            (
             'Authorization: key=' . API_ACCESS_KEY,
             'Content-Type: application/json'
            );
            #Send Reponse To FireBase Server  
            $ch = curl_init();
            curl_setopt( $ch,CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send' );
            curl_setopt( $ch,CURLOPT_POST, true );
            curl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );
            curl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );
            curl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );
            curl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );
            $result = curl_exec($ch );
            curl_close( $ch );
             $logquery ="insert notificationlog set status ='".$result."',deviceid ='".$deviceToken."',deviceType='Android',message='".addslashes($message)."'";
      mysql_query($logquery);
            #Echo Result Of FireBase Server
            return $result;
   }

   function sendandroidnotification($id,$message)
   {
         
          #API access key from Google API's Console
          define( 'API_ACCESS_KEY', 'YOUR-SERVER-API-ACCESS-KEY-GOES-HERE' );
          $registrationIds = $id;
          #prep the bundle
           $msg = array
                (
          'body'  => 'Body  Of Notification',
          'title' => 'Title Of Notification',
                    'icon'  => 'myicon',/*Default Icon*/
                      'sound' => 'mySound'/*Default sound*/
                );
        $fields = array
            (
              'to'    => $registrationIds,
              'notification'  => $msg
            );
        
        
        $headers = array
            (
              'Authorization: key=' . API_ACCESS_KEY,
              'Content-Type: application/json'
            );
      #Send Reponse To FireBase Server  
          $ch = curl_init();
          curl_setopt( $ch,CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send' );
          curl_setopt( $ch,CURLOPT_POST, true );
          curl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );
          curl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );
          curl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );
          curl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );
          $result = curl_exec($ch );
          curl_close( $ch );
      #Echo Result Of FireBase Server
      echo $result;

   }

//select a.event_id,a.ed_id,a.bird_id,d.brid_type,a.race_distance,a.date,a.end_time,TIMESTAMP(a.date, STR_TO_DATE(a.start_time, '%h:%i %p')) as stimes,TIMESTAMP(a.date, STR_TO_DATE(a.end_time, '%h:%i %p')) as etimes FROM ppa_event_details as a LEFT JOIN ppa_events as b on a.event_id=b.Events_id LEFT JOIN users as c on b.Org_id=c.users_id LEFT JOIN ppa_bird_type as d on d.b_id=a.bird_id where c.Org_code='PPA' and ('2018-09-09 13:00:00' BETWEEN TIMESTAMP(a.date, STR_TO_DATE(a.start_time, '%h:%i %p')) and TIMESTAMP(a.date, STR_TO_DATE(a.end_time, '%h:%i %p'))) and b.result_publish='0' group by a.race_distance order by etimes DESC



?>
");



?>